const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const Embeds = require('./embeds');

class Notifications {
    constructor(client) {
        this.client = client;
        this.notifications = new Map();
    }

    async sendEmailNotification(channel, email, userId) {
        try {
            const embed = Embeds.createReceivedEmailEmbed(email);
            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('refresh_emails')
                        .setLabel('üîÑ Actualiser')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('delete_email')
                        .setLabel('üóëÔ∏è Supprimer')
                        .setStyle(ButtonStyle.Danger)
                );

            const message = await channel.send({
                content: `üîî **NOUVEL EMAIL** üîî\n<@${userId}>, vous avez re√ßu un nouveau message !\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`,
                embeds: [embed],
                components: [row]
            });

            setTimeout(() => {
                message.delete().catch(() => {});
            }, 24 * 60 * 60 * 1000);

            return true;
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'envoi de la notification:', error);
            return false;
        }
    }

    async sendExpirationWarning(channel, userId, expiresIn) {
        try {
            const embed = new EmbedBuilder()
                .setColor(0xFEE75C)
                .setTitle('‚ö†Ô∏è Email Temporaire - Expiration Proche')
                .setDescription([
                    '**Votre email temporaire va bient√¥t expirer !**',
                    '',
                    `‚è≥ Expire <t:${Math.floor((Date.now() + expiresIn) / 1000)}:R>`,
                    '',
                    '*Cr√©ez un nouvel email si n√©cessaire avec `/email create`*'
                ].join('\n'))
                .setFooter({ text: 'Pluzio Mail ‚Ä¢ Notification d\'expiration' });

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('create_new_email')
                        .setLabel('üìß Cr√©er un nouvel email')
                        .setStyle(ButtonStyle.Success)
                );

            await channel.send({
                content: `‚ö†Ô∏è <@${userId}>, attention !`,
                embeds: [embed],
                components: [row]
            });

            return true;
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'envoi de l\'avertissement d\'expiration:', error);
            return false;
        }
    }

    async sendWelcomeMessage(channel, userId) {
        try {
            const embed = new EmbedBuilder()
                .setColor(0x5865F2)
                .setTitle('üëã Bienvenue sur Pluzio Mail !')
                .setDescription([
                    '**Votre canal email priv√© a √©t√© cr√©√© !**',
                    '',
                    '**üöÄ Pour commencer :**',
                    '1. Cr√©ez votre premi√®re adresse email avec le bouton ci-dessous',
                    '2. Utilisez cette adresse o√π vous en avez besoin',
                    '3. Les emails re√ßus appara√Ætront automatiquement ici',
                    '',
                    '*üí° Vos emails sont priv√©s et s√©curis√©s*'
                ].join('\n'))
                .setFooter({ text: 'Pluzio Mail ‚Ä¢ Service d\'Email Temporaire' });

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('create_email')
                        .setLabel('üìß Cr√©er un email')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId('help')
                        .setLabel('‚ùì Aide')
                        .setStyle(ButtonStyle.Secondary)
                );

            await channel.send({
                content: `üéâ <@${userId}>, bienvenue !`,
                embeds: [embed],
                components: [row]
            });

            return true;
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'envoi du message de bienvenue:', error);
            return false;
        }
    }

    async sendErrorNotification(channel, userId, title, description) {
        try {
            const embed = Embeds.createErrorEmbed(title, description);
            
            await channel.send({
                content: `‚ö†Ô∏è <@${userId}>, une erreur est survenue.`,
                embeds: [embed]
            });

            return true;
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'envoi de la notification d\'erreur:', error);
            return false;
        }
    }
}

module.exports = Notifications;