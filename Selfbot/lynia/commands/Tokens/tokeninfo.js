const d = require('discord.js-selfbot-v13');
const fs = require('fs');
const path = require('path'); // Ajoutez ceci si ce n'est pas d√©j√† pr√©sent
const { language } = require("../../fonctions"); // Assurez-vous que le chemin est correct

module.exports = {
    name: "tokeninfo",
    descriptionfr: "Affiche les informations d'un token",
    descriptionen: "Display informations from a token",
    usage: "<token>",
    run: async (client, message, args) => {
        if (!args[0]) return message.edit(await language(client, 
            "Veuillez entrer un token", 
            "Please provide a token"
        ));
        
        const test = await check(args[0]);
        if (!test) {
            return message.edit(await language(client, 
                `‚õß __**${client.db.name}**__ ‚õß\n\`STATUS\` ‚ûú \`üî¥\``, 
                `‚õß __**${client.db.name}**__ ‚õß\n\`STATUS\` ‚ûú \`üî¥\``
            ));
        } else {
            return message.edit(await language(client, 
                `‚õß __**${client.db.name}**__ ‚õß\n${test.split("++")[0]}`, 
                `‚õß __**${client.db.name}**__ ‚õß\n${test.split("++")[1]}`
            ));
        }
    }
}

const check = async token => {
    try {
        const nclient = new d.Client({ checkUpdate: false });
        await nclient.login(token);
        nclient.on('ready', () => nclient.destroy());
        return `\`Nickname\` ‚ûú **${nclient.user.username}**\n` +
               `\`ID\` ‚ûú **${nclient.user.id}**\n` +
               `\`Bot\` ‚ûú **${nclient.user.bot ? "Yes" : "No"}**\n` +
               `\`Guilds\` ‚ûú **${nclient.guilds.cache.size}**\n` +
               `\`Channels\` ‚ûú **${nclient.channels.cache.size}**\n` +
               `\`Users\` ‚ûú **${nclient.users.cache.size}**\n` +
               `\`Bots\` ‚ûú **${nclient.users.cache.filter(c => c.bot).size}**\n` +
               `\`Administrator on\` ‚ûú **${nclient.guilds.cache.filter(m => m.members.me.permissions.has("ADMINISTRATOR")).size} guilds**\n` +
               `\`Cr√©ateur de\` ‚ûú **${nclient.guilds.cache.filter(c => c.ownerId === nclient.user.id).size} serveurs**\n` +
               `\`Emotes\` ‚ûú **${nclient.emojis.cache.size}**\n` +
               `\`Notes\` ‚ûú **${nclient.user.notes.size}**\n` +
               `\`E-MAIL\` ‚ûú **${nclient.user.emailAddress ? nclient.user.emailAddress : "No e-mail"}**\n` +
               `\`Num√©ro de t√©l√©phone\` ‚ûú **${nclient.user.phoneNumber ? nclient.user.phoneNumber : "Pas de num√©ro"}**`;
    } catch {
        return false;
    }
}
